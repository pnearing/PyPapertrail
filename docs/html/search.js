window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "Archive", "modulename": "Archive", "kind": "module", "doc": "<p>File: Archive.py</p>\n"}, {"fullname": "Archive.Archive", "modulename": "Archive", "qualname": "Archive", "kind": "class", "doc": "<p>Class representing a Papertrail archive.</p>\n"}, {"fullname": "Archive.Archive.__init__", "modulename": "Archive", "qualname": "Archive.__init__", "kind": "function", "doc": "<p>Initialize the archive.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>api_key: Str</strong>:  The api key.</li>\n<li><strong>raw_archive: Optional[dict]</strong>:  The raw dict from papertrail listing. Default = None\nNote: if raw_archive is used, last_fetched must be defined.</li>\n<li><strong>from_dict: Optional[dict]</strong>:  Load from a saved dict created by __to_dict__().</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">raw_archive</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">from_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">last_fetched</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "Archive.Archive.download", "modulename": "Archive", "qualname": "Archive.download", "kind": "function", "doc": "<p>Download this archive.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>destination_dir</strong>:  Str. Directory to save file in.</li>\n<li><strong>file_name</strong>:  Optional[str]. Override the default file name with this file name. Default=None</li>\n<li><strong>overwrite</strong>:  Bool. Overwrite existing files. Default = False</li>\n<li><strong>callback</strong>:  Optional[Callable]. The call back to call each chunk downloaded. Default = None.\nThe function signature is: callback (archive: Archive, bytes_downloaded: int, argument: Optional[Any]) -> None</li>\n<li><strong>argument</strong>:  Object. An optional argument to pass to the callback.  Default = None</li>\n<li><strong>chunk_size</strong>:  Int. The chunk size to download at a time in bytes. Default = 8196 (8K)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Tuple[bool, str | int, Optional[str]]: The first element is a status flag indicating success, True\n      being a success, and False a failure. If the first element is True, then the second element will be\n      the total number of bytes downloaded, and the third element will be the path to the downloaded file.\n      If the first element is False, the second element will be an error message indicating what went\n      wrong, and the third element will optionally be the path to the partially downloaded file.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">destination_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">file_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">overwrite</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">callback</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">argument</span><span class=\"p\">:</span> <span class=\"n\">Any</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">chunk_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">8196</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "Archive.Archive.start_time", "modulename": "Archive", "qualname": "Archive.start_time", "kind": "variable", "doc": "<p>Start time of the archive.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Timezone-aware datetime object.</p>\n</blockquote>\n", "annotation": ": datetime.datetime"}, {"fullname": "Archive.Archive.end_time", "modulename": "Archive", "qualname": "Archive.end_time", "kind": "variable", "doc": "<p>End time of the archive.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Timezone-aware datetime object.</p>\n</blockquote>\n", "annotation": ": datetime.datetime"}, {"fullname": "Archive.Archive.formatted_start_time", "modulename": "Archive", "qualname": "Archive.formatted_start_time", "kind": "variable", "doc": "<p>Formatted start time.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>English str.</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "Archive.Archive.formatted_duration", "modulename": "Archive", "qualname": "Archive.formatted_duration", "kind": "variable", "doc": "<p>Formatted duration of the archive.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>English str.</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "Archive.Archive.file_name", "modulename": "Archive", "qualname": "Archive.file_name", "kind": "variable", "doc": "<p>File name of the archive.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Str</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "Archive.Archive.file_size", "modulename": "Archive", "qualname": "Archive.file_size", "kind": "variable", "doc": "<p>Size of the archive in bytes.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Int</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "Archive.Archive.link", "modulename": "Archive", "qualname": "Archive.link", "kind": "variable", "doc": "<p>Download link of the archive.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Str</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "Archive.Archive.duration", "modulename": "Archive", "qualname": "Archive.duration", "kind": "variable", "doc": "<p>Duration of the archive in minutes.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Int</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "Archive.Archive.is_downloading", "modulename": "Archive", "qualname": "Archive.is_downloading", "kind": "variable", "doc": "<p>Is the archive currently downloading? True if downloading, False if not.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Bool</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "Archive.Archive.is_downloaded", "modulename": "Archive", "qualname": "Archive.is_downloaded", "kind": "variable", "doc": "<p>Has the archive been downloaded? True if so, False if not.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Bool</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "Archive.Archive.download_path", "modulename": "Archive", "qualname": "Archive.download_path", "kind": "variable", "doc": "<p>Path to the downloaded file if successfully downloaded. None if not downloaded.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Optional[str]</p>\n</blockquote>\n", "annotation": ": Optional[str]"}, {"fullname": "Archive.Archive.last_fetched", "modulename": "Archive", "qualname": "Archive.last_fetched", "kind": "variable", "doc": "<p>Last time this was read from the server, times in UTC.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Datetime object.</p>\n</blockquote>\n", "annotation": ": datetime.datetime"}, {"fullname": "Archives", "modulename": "Archives", "kind": "module", "doc": "<p>File: Archives.py</p>\n"}, {"fullname": "Archives.Archives", "modulename": "Archives", "qualname": "Archives", "kind": "class", "doc": "<p>Class to hold papertrail archive calls.</p>\n"}, {"fullname": "Archives.Archives.__init__", "modulename": "Archives", "qualname": "Archives.__init__", "kind": "function", "doc": "<p>Initialize Papertrail API.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>api_key: Str: The papertrail \"API Token\" found in papertrail under</strong>:  settings / profile / API Token</li>\n<li><strong>from_dict: Dict</strong>:  Load from a dict created by __to_dict__().\nNOTE: If not set to None, it will ignore do_load.</li>\n<li><strong>do_load: Bool</strong>:  Load the archive list on initialization.\nDefault = True.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li>ArchiveError: Raises ArchiveError on error during loading.\n:returns: None</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">from_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">do_load</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "Archives.Archives.load", "modulename": "Archives", "qualname": "Archives.load", "kind": "function", "doc": "<p>Load the archive list from server.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Tuple[bool, str]: First element, the bool, is True if successful, and False if not, if the first\n              element is True, the second element, the str is the message: \"OK\"; And if the first element is\n              False, the second element will be an error message.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "Archives.Archives.reload", "modulename": "Archives", "qualname": "Archives.reload", "kind": "function", "doc": "<p>Reload the data from Papertrail.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "Archives.Archives.get_by_file_name", "modulename": "Archives", "qualname": "Archives.get_by_file_name", "kind": "function", "doc": "<p>Return an archive with a matching filename.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>search_file_name: Str</strong>:  The file name to search for.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Archive | None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">search_file_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Archive</span><span class=\"o\">.</span><span class=\"n\">Archive</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "Archives.Archives.get_by_start_time", "modulename": "Archives", "qualname": "Archives.get_by_start_time", "kind": "function", "doc": "<p>Return an archive matching a given start_time, given time will be converted to UTC if timezone aware or assumed\n    to be un UTC if timezone naive.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>search_start_time: Datetime object</strong>:  Datetime to search for.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Archive | None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">search_start_time</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Archive</span><span class=\"o\">.</span><span class=\"n\">Archive</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "Archives.Archives.get_by_end_time", "modulename": "Archives", "qualname": "Archives.get_by_end_time", "kind": "function", "doc": "<p>Get an archive matching a given stop time. Given time will be converted to UTC if timezone aware or assumed to\n    be UTC if timezone naive.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>search_end_time: Datetime object</strong>:  Datetime to search for.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Archive | None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">search_end_time</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Archive</span><span class=\"o\">.</span><span class=\"n\">Archive</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "Archives.Archives.get_by_time", "modulename": "Archives", "qualname": "Archives.get_by_time", "kind": "function", "doc": "<p>Get an archive that contains a given datetime object, matches start_time &lt;= search_time &lt;= end_time.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>search_time: Datetime object</strong>:  The datetime to search for.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ArchiveError</strong>:  If archives have not been loaded.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Optional[Archive]</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">search_time</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Archive</span><span class=\"o\">.</span><span class=\"n\">Archive</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "Archives.Archives.last_fetched", "modulename": "Archives", "qualname": "Archives.last_fetched", "kind": "variable", "doc": "<p>Time the archive list was last fetched from papertrail.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Optional[datetime]: Timezone-aware datetime object in UTC.</p>\n</blockquote>\n", "annotation": ": Optional[datetime.datetime]"}, {"fullname": "Archives.Archives.is_loaded", "modulename": "Archives", "qualname": "Archives.is_loaded", "kind": "variable", "doc": "<p>Is the archive list loaded?</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Bool.</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "Archives.Archives.archives", "modulename": "Archives", "qualname": "Archives.archives", "kind": "variable", "doc": "<p>Return a tuple of archives.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Tuple[Archive]</p>\n</blockquote>\n", "annotation": ": tuple[Archive.Archive]"}, {"fullname": "Archives.download_callback", "modulename": "Archives", "qualname": "download_callback", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">archive</span><span class=\"p\">:</span> <span class=\"n\">Archive</span><span class=\"o\">.</span><span class=\"n\">Archive</span>, </span><span class=\"param\"><span class=\"n\">bytes_downloaded</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">argument</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "common", "modulename": "common", "kind": "module", "doc": "<p>Common variables / functions for papertrail api.</p>\n"}, {"fullname": "common.ARCHIVES", "modulename": "common", "qualname": "ARCHIVES", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[list[~Archive]]", "default_value": "None"}, {"fullname": "common.DESTINATIONS", "modulename": "common", "qualname": "DESTINATIONS", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[list[~Destination]]", "default_value": "None"}, {"fullname": "common.GROUPS", "modulename": "common", "qualname": "GROUPS", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[list[~Group]]", "default_value": "None"}, {"fullname": "common.SEARCHES", "modulename": "common", "qualname": "SEARCHES", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[list[~SavedSearch]]", "default_value": "None"}, {"fullname": "common.SYSTEMS", "modulename": "common", "qualname": "SYSTEMS", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[list[~System]]", "default_value": "None"}, {"fullname": "common.USERS", "modulename": "common", "qualname": "USERS", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[list[~User]]", "default_value": "None"}, {"fullname": "common.ARCHIVES_LAST_FETCHED", "modulename": "common", "qualname": "ARCHIVES_LAST_FETCHED", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[datetime.datetime]", "default_value": "None"}, {"fullname": "common.DESTINATIONS_LAST_FETCHED", "modulename": "common", "qualname": "DESTINATIONS_LAST_FETCHED", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[datetime.datetime]", "default_value": "None"}, {"fullname": "common.GROUPS_LAST_FETCHED", "modulename": "common", "qualname": "GROUPS_LAST_FETCHED", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[datetime.datetime]", "default_value": "None"}, {"fullname": "common.SEARCHES_LAST_FETCHED", "modulename": "common", "qualname": "SEARCHES_LAST_FETCHED", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[datetime.datetime]", "default_value": "None"}, {"fullname": "common.SYSTEMS_LAST_FETCHED", "modulename": "common", "qualname": "SYSTEMS_LAST_FETCHED", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[datetime.datetime]", "default_value": "None"}, {"fullname": "common.USERS_LAST_FETCHED", "modulename": "common", "qualname": "USERS_LAST_FETCHED", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[datetime.datetime]", "default_value": "None"}, {"fullname": "common.BASE_URL", "modulename": "common", "qualname": "BASE_URL", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;https://papertrailapp.com/api/v1/&#x27;"}, {"fullname": "common.USE_WARNINGS", "modulename": "common", "qualname": "USE_WARNINGS", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "common.SYSTEM_WARNING_MADE", "modulename": "common", "qualname": "SYSTEM_WARNING_MADE", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "common.is_timezone_aware", "modulename": "common", "qualname": "is_timezone_aware", "kind": "function", "doc": "<p>Checks if a given datetime object is timezone-aware.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dt</strong>:  The datetime object to check.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Bool, True if timezone-aware, False if timezone-unaware.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dt</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "common.convert_to_utc", "modulename": "common", "qualname": "convert_to_utc", "kind": "function", "doc": "<p>Takes a datetime object that is either timezone-aware or timezone-naive, and returns a datetime object that is\ntimezone-aware and is in UTC time.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>date_time_obj: Datetime object</strong>:  The datetime to convert.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Datetime: Timezone-aware UTC datetime.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">date_time_obj</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span></span><span class=\"return-annotation\">) -> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span>:</span></span>", "funcdef": "def"}, {"fullname": "common.parse_limit_header", "modulename": "common", "qualname": "parse_limit_header", "kind": "function", "doc": "<p>Parse the rate limit headers.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>headers: Dict</strong>:  The headers.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>IndexError | ValueError</strong>:  If an invalid dict is passed.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">headers</span><span class=\"p\">:</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">structures</span><span class=\"o\">.</span><span class=\"n\">CaseInsensitiveDict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "common.requests_get", "modulename": "common", "qualname": "requests_get", "kind": "function", "doc": "<p>Make a requests.get() call, and return the json data.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>url: Str</strong>:  The url to get.</li>\n<li><strong>api_key: Str</strong>:  The api key</li>\n<li><strong>returns_json: Bool</strong>:  The request returns JSON, default = True.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>List | dict: The response data.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">returns_json</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "common.requests_post", "modulename": "common", "qualname": "requests_post", "kind": "function", "doc": "<p>Make a requests.post() call, and return the json data.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>url: Str</strong>:  The url to post to.</li>\n<li><strong>api_key: Str</strong>:  The API Key.</li>\n<li><strong>json_data: Any</strong>:  The json data to post.</li>\n<li><strong>returns_json: Bool</strong>:  The request returns JSON.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list | dict: The server response.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">json_data</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">returns_json</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "common.requests_put", "modulename": "common", "qualname": "requests_put", "kind": "function", "doc": "<p>Make a requests.put() call, and return the json response data.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>url: Str</strong>:  The url to put to.</li>\n<li><strong>api_key: Str</strong>:  The API Key</li>\n<li><strong>json_data: Any</strong>:  The json data to send.</li>\n<li><strong>returns_json: Bool</strong>:  The request returns JSON data, default=True.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list | dict: The server response data.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">json_data</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">returns_json</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "common.requests_del", "modulename": "common", "qualname": "requests_del", "kind": "function", "doc": "<p>Send a 'delete' request to the given url.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>url: Str</strong>:  The url to send the request to.</li>\n<li><strong>api_key: Str</strong>:  The API Key.</li>\n<li><strong>returns_json: Bool</strong>:  The request returns JSON data, default = True.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dict: JSON Decoded response.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">returns_json</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "Destination", "modulename": "Destination", "kind": "module", "doc": "<p>File: Destination.py</p>\n"}, {"fullname": "Destination.Destination", "modulename": "Destination", "qualname": "Destination", "kind": "class", "doc": "<p>Class storing a single log destination.</p>\n"}, {"fullname": "Destination.Destination.__init__", "modulename": "Destination", "qualname": "Destination.__init__", "kind": "function", "doc": "<p>Initialize a single destination.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>api_key: Str</strong>:  Api key for papertrail.</li>\n<li><strong>raw_destination: Dict</strong>:  The raw response dict from papertrail.\nNote: If using raw_destination, last_fetched must be defined.</li>\n<li><strong>from_dict: Dict</strong>:  The dict created by __to_dict__().</li>\n<li><strong>last_fetched: Datetime object</strong>:  The date and time this was last fetched from the server.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">raw_destination</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">from_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">last_fetched</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "Destination.Destination.reload", "modulename": "Destination", "qualname": "Destination.reload", "kind": "function", "doc": "<p>Reload this destination from the server.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Destination: This instance.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">typing_extensions</span><span class=\"o\">.</span><span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, {"fullname": "Destination.Destination.id", "modulename": "Destination", "qualname": "Destination.id", "kind": "variable", "doc": "<p>Papertrail ID</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Int</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "Destination.Destination.filter", "modulename": "Destination", "qualname": "Destination.filter", "kind": "variable", "doc": "<p>Filters for this destination.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Str</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "Destination.Destination.syslog_host_name", "modulename": "Destination", "qualname": "Destination.syslog_host_name", "kind": "variable", "doc": "<p>Syslog target host name</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Str</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "Destination.Destination.syslog_port", "modulename": "Destination", "qualname": "Destination.syslog_port", "kind": "variable", "doc": "<p>Syslog target port.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Int</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "Destination.Destination.description", "modulename": "Destination", "qualname": "Destination.description", "kind": "variable", "doc": "<p>Destination description.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Str</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "Destination.Destination.info_link", "modulename": "Destination", "qualname": "Destination.info_link", "kind": "variable", "doc": "<p>Link to json info.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Str</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "Destination.Destination.last_fetched", "modulename": "Destination", "qualname": "Destination.last_fetched", "kind": "variable", "doc": "<p>Last time this was loaded from the server.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Datetime: None if not loaded.</p>\n</blockquote>\n", "annotation": ": datetime.datetime"}, {"fullname": "Destinations", "modulename": "Destinations", "kind": "module", "doc": "<p>File: Destinations.py</p>\n"}, {"fullname": "Destinations.Destinations", "modulename": "Destinations", "qualname": "Destinations", "kind": "class", "doc": "<p>Class to store a list of log destinations. Handles loading from papertrail.</p>\n"}, {"fullname": "Destinations.Destinations.__init__", "modulename": "Destinations", "qualname": "Destinations.__init__", "kind": "function", "doc": "<p>Initialize the log destinations, optionally loading from papertrail.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>api_key: Str</strong>:  API key.</li>\n<li><strong>from_dict: Optional[dict]: Load from a dict created by __to_dict__(). NOTE</strong>:  if from_dict is not None,\nthen the parameter do_load is ignored.</li>\n<li><strong>do_load: Bool</strong>:  True = load from papertrail on initialize.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">from_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">do_load</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "Destinations.Destinations.load", "modulename": "Destinations", "qualname": "Destinations.load", "kind": "function", "doc": "<p>Load destinations from papertrail.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "Destinations.Destinations.get_by_id", "modulename": "Destinations", "qualname": "Destinations.get_by_id", "kind": "function", "doc": "<p>Get a destination by id.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>search_id: Int</strong>:  the ID to search for.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Destination | None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">search_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Destination</span><span class=\"o\">.</span><span class=\"n\">Destination</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "Destinations.Destinations.get_by_port", "modulename": "Destinations", "qualname": "Destinations.get_by_port", "kind": "function", "doc": "<p>Get a destination by port number.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>search_port: Int</strong>:  The port number to search for.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Destination | None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">search_port</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Destination</span><span class=\"o\">.</span><span class=\"n\">Destination</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "Destinations.Destinations.get_by_filter", "modulename": "Destinations", "qualname": "Destinations.get_by_filter", "kind": "function", "doc": "<p>Get a destination by filter.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>search_filter: Str</strong>:  The filter to search for.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Destination | None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">search_filter</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Destination</span><span class=\"o\">.</span><span class=\"n\">Destination</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "Destinations.Destinations.last_fetched", "modulename": "Destinations", "qualname": "Destinations.last_fetched", "kind": "variable", "doc": "<p>The last time this list was fetched.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Optional[datetime]</p>\n</blockquote>\n", "annotation": ": Optional[datetime.datetime]"}, {"fullname": "Destinations.Destinations.is_loaded", "modulename": "Destinations", "qualname": "Destinations.is_loaded", "kind": "variable", "doc": "<p>Has the list been loaded?</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Bool</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "Destinations.Destinations.destinations", "modulename": "Destinations", "qualname": "Destinations.destinations", "kind": "variable", "doc": "<p>Return a tuple of destinations.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Tuple[Destination]</p>\n</blockquote>\n", "annotation": ": tuple[Destination.Destination]"}, {"fullname": "Event", "modulename": "Event", "kind": "module", "doc": "<p>File: Event.py</p>\n"}, {"fullname": "Event.Event", "modulename": "Event", "qualname": "Event", "kind": "class", "doc": "<p>Class to store an event.</p>\n"}, {"fullname": "Event.Event.__init__", "modulename": "Event", "qualname": "Event.__init__", "kind": "function", "doc": "<p>Initialize an Event object:</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>raw_event: Optional[dict]</strong>:  The dict provided by Papertrail.</li>\n<li><strong>from_dict: Optional[dict]</strong>:  A dict provided by __to_dict__().</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">raw_event</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">from_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "Event.Event.id", "modulename": "Event", "qualname": "Event.id", "kind": "variable", "doc": "<p>Event ID.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Int</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "Event.Event.source_ip", "modulename": "Event", "qualname": "Event.source_ip", "kind": "variable", "doc": "<p>Source IP address.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Str.</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "Event.Event.program", "modulename": "Event", "qualname": "Event.program", "kind": "variable", "doc": "<p>Program, can be None if not defined by papertrail.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Str</p>\n</blockquote>\n", "annotation": ": Optional[str]"}, {"fullname": "Event.Event.message", "modulename": "Event", "qualname": "Event.message", "kind": "variable", "doc": "<p>Message</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Str.</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "Event.Event.received_at", "modulename": "Event", "qualname": "Event.received_at", "kind": "variable", "doc": "<p>Datetime object for when this was received.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Datetime object.</p>\n</blockquote>\n", "annotation": ": datetime.datetime"}, {"fullname": "Event.Event.generated_at", "modulename": "Event", "qualname": "Event.generated_at", "kind": "variable", "doc": "<p>Datetime object for when this was generated.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Datetime object.</p>\n</blockquote>\n", "annotation": ": datetime.datetime"}, {"fullname": "Event.Event.display_received_at", "modulename": "Event", "qualname": "Event.display_received_at", "kind": "variable", "doc": "<p>Display received at time.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Str.</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "Event.Event.source_id", "modulename": "Event", "qualname": "Event.source_id", "kind": "variable", "doc": "<p>The source system ID of this event</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Int.</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "Event.Event.source_name", "modulename": "Event", "qualname": "Event.source_name", "kind": "variable", "doc": "<p>The name of the source system.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Str.</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "Event.Event.host_name", "modulename": "Event", "qualname": "Event.host_name", "kind": "variable", "doc": "<p>The source host name generating this event.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Str.</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "Event.Event.severity", "modulename": "Event", "qualname": "Event.severity", "kind": "variable", "doc": "<p>The severity of the event.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Str.</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "Event.Event.facility", "modulename": "Event", "qualname": "Event.facility", "kind": "variable", "doc": "<p>The logging facility.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Str.</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "Exceptions", "modulename": "Exceptions", "kind": "module", "doc": "<p>File: Exceptions.py\nPapertrail Exceptions and Warnings.</p>\n"}, {"fullname": "Exceptions.ParameterError", "modulename": "Exceptions", "qualname": "ParameterError", "kind": "class", "doc": "<p>Exception to throw when a parameter error occurs.</p>\n", "bases": "builtins.Exception"}, {"fullname": "Exceptions.ParameterError.__init__", "modulename": "Exceptions", "qualname": "ParameterError.__init__", "kind": "function", "doc": "<p>Initialize the ParameterError</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>error_message: Str</strong>:  The error message.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">error_message</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "Exceptions.ParameterError.error_message", "modulename": "Exceptions", "qualname": "ParameterError.error_message", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "Exceptions.PapertrailError", "modulename": "Exceptions", "qualname": "PapertrailError", "kind": "class", "doc": "<p>Base Exception for Papertrail objects.</p>\n", "bases": "builtins.Exception"}, {"fullname": "Exceptions.PapertrailError.__init__", "modulename": "Exceptions", "qualname": "PapertrailError.__init__", "kind": "function", "doc": "<p>Base Exception for Papertrail Errors.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>error_message</strong>:  Message explaining the error.</li>\n<li><strong>kwargs</strong>:  Any additional key word arguments.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">error_message</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "Exceptions.PapertrailError.error_message", "modulename": "Exceptions", "qualname": "PapertrailError.error_message", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "Exceptions.PapertrailError.key_word_args", "modulename": "Exceptions", "qualname": "PapertrailError.key_word_args", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict"}, {"fullname": "Exceptions.BadRequestError", "modulename": "Exceptions", "qualname": "BadRequestError", "kind": "class", "doc": "<p>Exception to throw when there is a bad request.</p>\n", "bases": "PapertrailError"}, {"fullname": "Exceptions.BadRequestError.__init__", "modulename": "Exceptions", "qualname": "BadRequestError.__init__", "kind": "function", "doc": "<p>Initialize a bad request error.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>papertrail_message</strong>:  Message from papertrail json.</li>\n<li><strong>kwargs</strong>:  Any additional key word arguments.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">papertrail_message</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "Exceptions.AuthenticationError", "modulename": "Exceptions", "qualname": "AuthenticationError", "kind": "class", "doc": "<p>Exception when given an invalid API key.</p>\n", "bases": "PapertrailError"}, {"fullname": "Exceptions.AuthenticationError.__init__", "modulename": "Exceptions", "qualname": "AuthenticationError.__init__", "kind": "function", "doc": "<p>Initialize an authentication error.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>kwargs</strong>:  Any additional key work arguments.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "Exceptions.NotFoundError", "modulename": "Exceptions", "qualname": "NotFoundError", "kind": "class", "doc": "<p>Exception to raise when getting a 404, Shouldn't see this in practice.</p>\n", "bases": "PapertrailError"}, {"fullname": "Exceptions.NotFoundError.__init__", "modulename": "Exceptions", "qualname": "NotFoundError.__init__", "kind": "function", "doc": "<p>Initialize a 404.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>kwargs</strong>:  Any additional key word arguments.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "Exceptions.MethodNotAllowedError", "modulename": "Exceptions", "qualname": "MethodNotAllowedError", "kind": "class", "doc": "<p>Exception to raise when calling an invalid method.</p>\n", "bases": "PapertrailError"}, {"fullname": "Exceptions.MethodNotAllowedError.__init__", "modulename": "Exceptions", "qualname": "MethodNotAllowedError.__init__", "kind": "function", "doc": "<p>Initialize a method not found error.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>kwargs</strong>:  Any additional arguments.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "Exceptions.RateLimitError", "modulename": "Exceptions", "qualname": "RateLimitError", "kind": "class", "doc": "<p>Exception to throw when a rate limit error occurs.</p>\n", "bases": "PapertrailError"}, {"fullname": "Exceptions.RateLimitError.__init__", "modulename": "Exceptions", "qualname": "RateLimitError.__init__", "kind": "function", "doc": "<p>Initialize a rate limit error.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>headers: Dict</strong>:  The request headers.</li>\n<li><strong>kwargs</strong>:  Any additional key word arguments.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">headers</span><span class=\"p\">:</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">structures</span><span class=\"o\">.</span><span class=\"n\">CaseInsensitiveDict</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "Exceptions.RateLimitError.limit", "modulename": "Exceptions", "qualname": "RateLimitError.limit", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Exceptions.RateLimitError.remaining", "modulename": "Exceptions", "qualname": "RateLimitError.remaining", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Exceptions.RateLimitError.reset", "modulename": "Exceptions", "qualname": "RateLimitError.reset", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Exceptions.SystemsError", "modulename": "Exceptions", "qualname": "SystemsError", "kind": "class", "doc": "<p>Exception to raise when system api calls produce an error.</p>\n", "bases": "PapertrailError"}, {"fullname": "Exceptions.SystemsError.__init__", "modulename": "Exceptions", "qualname": "SystemsError.__init__", "kind": "function", "doc": "<p>Initialize a system error.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>error_message</strong>:  Message explaining the error.</li>\n<li><strong>kwargs</strong>:  Any additional key word arguments.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">error_message</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "Exceptions.GroupError", "modulename": "Exceptions", "qualname": "GroupError", "kind": "class", "doc": "<p>Exception to raise when groups api calls produce an error.</p>\n", "bases": "PapertrailError"}, {"fullname": "Exceptions.GroupError.__init__", "modulename": "Exceptions", "qualname": "GroupError.__init__", "kind": "function", "doc": "<p>Initialize a group error.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>error_message</strong>:  Message explaining the error.</li>\n<li><strong>kwargs</strong>:  Any additional key word arguments.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">error_message</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "Exceptions.SavedSearchError", "modulename": "Exceptions", "qualname": "SavedSearchError", "kind": "class", "doc": "<p>Exception to raise when a saved search opi call produces an error.</p>\n", "bases": "PapertrailError"}, {"fullname": "Exceptions.SavedSearchError.__init__", "modulename": "Exceptions", "qualname": "SavedSearchError.__init__", "kind": "function", "doc": "<p>Initialize a saved search error.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>error_message</strong>:  Message explaining the error.</li>\n<li><strong>kwargs</strong>:  Any additional key word arguments.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">error_message</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "Exceptions.DestinationError", "modulename": "Exceptions", "qualname": "DestinationError", "kind": "class", "doc": "<p>Exception to raise when a log destination api call produces an error.</p>\n", "bases": "PapertrailError"}, {"fullname": "Exceptions.DestinationError.__init__", "modulename": "Exceptions", "qualname": "DestinationError.__init__", "kind": "function", "doc": "<p>Initialize a log destination error.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>error_message</strong>:  Message explaining the error.</li>\n<li><strong>kwargs</strong>:  Any additional keyword arguments.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">error_message</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "Exceptions.UsersError", "modulename": "Exceptions", "qualname": "UsersError", "kind": "class", "doc": "<p>Exception to raise when a user's opi call produces an error.</p>\n", "bases": "PapertrailError"}, {"fullname": "Exceptions.UsersError.__init__", "modulename": "Exceptions", "qualname": "UsersError.__init__", "kind": "function", "doc": "<p>Initialize a user's error.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>error_message</strong>:  Message explaining the error.</li>\n<li><strong>kwargs</strong>:  Any additional key word arguments.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">error_message</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "Exceptions.UsageError", "modulename": "Exceptions", "qualname": "UsageError", "kind": "class", "doc": "<p>Exception to raise when an account usage produces an error.</p>\n", "bases": "PapertrailError"}, {"fullname": "Exceptions.UsageError.__init__", "modulename": "Exceptions", "qualname": "UsageError.__init__", "kind": "function", "doc": "<p>Initialize an account usage error.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>error_message</strong>:  Message explaining the error.</li>\n<li><strong>kwargs</strong>:  Any additional key word arguments.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">error_message</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "Exceptions.ArchiveError", "modulename": "Exceptions", "qualname": "ArchiveError", "kind": "class", "doc": "<p>Exception to raise when archive api calls produce an error.</p>\n", "bases": "PapertrailError"}, {"fullname": "Exceptions.ArchiveError.__init__", "modulename": "Exceptions", "qualname": "ArchiveError.__init__", "kind": "function", "doc": "<p>Initialize an archive error</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>error_message</strong>:  Message explaining the error.</li>\n<li><strong>kwargs</strong>:  Any additional key word arguments.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">error_message</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "Exceptions.QueryError", "modulename": "Exceptions", "qualname": "QueryError", "kind": "class", "doc": "<p>Exception to raise when a search query api call produces an error.</p>\n", "bases": "PapertrailError"}, {"fullname": "Exceptions.QueryError.__init__", "modulename": "Exceptions", "qualname": "QueryError.__init__", "kind": "function", "doc": "<p>Initialize a search query error.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>error_message</strong>:  Message explaining the error.</li>\n<li><strong>kwargs</strong>:  Any additional key word arguments.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">error_message</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "Exceptions.EventError", "modulename": "Exceptions", "qualname": "EventError", "kind": "class", "doc": "<p>Exception to throw if an error happens during Event processing.</p>\n", "bases": "PapertrailError"}, {"fullname": "Exceptions.EventError.__init__", "modulename": "Exceptions", "qualname": "EventError.__init__", "kind": "function", "doc": "<p>Initialize an event error.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>error_message: Str</strong>:  Message explaining the error.</li>\n<li><strong>kwargs</strong>:  Any additional key word arguments.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">error_message</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "Exceptions.InvalidServerResponse", "modulename": "Exceptions", "qualname": "InvalidServerResponse", "kind": "class", "doc": "<p>Exception to throw when the server sends invalid JSON.</p>\n", "bases": "PapertrailError"}, {"fullname": "Exceptions.InvalidServerResponse.__init__", "modulename": "Exceptions", "qualname": "InvalidServerResponse.__init__", "kind": "function", "doc": "<p>Base Exception for Papertrail Errors.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>error_message</strong>:  Message explaining the error.</li>\n<li><strong>kwargs</strong>:  Any additional key word arguments.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "Exceptions.UnhandledHTTPError", "modulename": "Exceptions", "qualname": "UnhandledHTTPError", "kind": "class", "doc": "<p>Exception to raise when encountering an unhandled HTTP Error code.</p>\n", "bases": "PapertrailError"}, {"fullname": "Exceptions.UnhandledHTTPError.__init__", "modulename": "Exceptions", "qualname": "UnhandledHTTPError.__init__", "kind": "function", "doc": "<p>Initialize an unhandled http error.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>status_code: Int</strong>:  The http status code.</li>\n<li><strong>exception: Requests.HTTPError</strong>:  The HTTPError from requests library.</li>\n<li><strong>kwargs</strong>:  Any additional key word arguments.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">status_code</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">exception</span><span class=\"p\">:</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">exceptions</span><span class=\"o\">.</span><span class=\"n\">HTTPError</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "Exceptions.UnhandledHTTPError.exception", "modulename": "Exceptions", "qualname": "UnhandledHTTPError.exception", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Exceptions.RequestReadTimeout", "modulename": "Exceptions", "qualname": "RequestReadTimeout", "kind": "class", "doc": "<p>Exception to throw when a read timeout occurs.</p>\n", "bases": "PapertrailError"}, {"fullname": "Exceptions.RequestReadTimeout.__init__", "modulename": "Exceptions", "qualname": "RequestReadTimeout.__init__", "kind": "function", "doc": "<p>Initialize a read timeout error.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>url</strong>:  The url being requested.</li>\n<li><strong>kwargs</strong>:  Any additional key word arguments.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "Exceptions.UnhandledRequestsError", "modulename": "Exceptions", "qualname": "UnhandledRequestsError", "kind": "class", "doc": "<p>Exception to throw when a requests.RequestException happens.</p>\n", "bases": "PapertrailError"}, {"fullname": "Exceptions.UnhandledRequestsError.__init__", "modulename": "Exceptions", "qualname": "UnhandledRequestsError.__init__", "kind": "function", "doc": "<p>Initialize an unhandled requests.RequestException.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>url: Str</strong>:  The url that was requested.</li>\n<li><strong>method: Str: The method that was called, IE</strong>:  put, post, get.</li>\n<li><strong>exception: A requests.RequestException</strong>:  The exception that happened.</li>\n<li><strong>kwargs</strong>:  Any additional key word arguments.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">exception</span><span class=\"p\">:</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">exceptions</span><span class=\"o\">.</span><span class=\"n\">RequestException</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "Exceptions.UnhandledRequestsError.url", "modulename": "Exceptions", "qualname": "UnhandledRequestsError.url", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "Exceptions.UnhandledRequestsError.method", "modulename": "Exceptions", "qualname": "UnhandledRequestsError.method", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "Exceptions.PapertrailWarning", "modulename": "Exceptions", "qualname": "PapertrailWarning", "kind": "class", "doc": "<p>Warning to raise when runtime warnings occur.</p>\n", "bases": "builtins.Warning"}, {"fullname": "Group", "modulename": "Group", "kind": "module", "doc": "<p>File: Group.py</p>\n"}, {"fullname": "Group.Group", "modulename": "Group", "qualname": "Group", "kind": "class", "doc": "<p>Class to store a single group.</p>\n"}, {"fullname": "Group.Group.__init__", "modulename": "Group", "qualname": "Group.__init__", "kind": "function", "doc": "<p>Initialize this group:</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>api_key: Str</strong>:  Api key.</li>\n<li><strong>last_fetched: Datetime object</strong>:  Datetime last fetched (UTC).</li>\n<li><strong>raw_group: Dict</strong>:  The dict provided by papertrail.</li>\n<li><strong>from_dict: Dict</strong>:  A dict created by __to_dict__().</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">raw_group</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">from_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">last_fetched</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "Group.Group.add_system", "modulename": "Group", "qualname": "Group.add_system", "kind": "function", "doc": "<p>Add a given system to this group.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>sys_to_add: System | int | str</strong>:  The System to add if a System object, the system ID to add if an int, or\nthe system name if a str.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>IndexError: If System | int: ID | str</strong>:  Name not found in Systems.</li>\n<li><strong>GroupError</strong>:  If the system is already in the group.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Self.\n      The updated group.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sys_to_add</span><span class=\"p\">:</span> <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"n\">System</span> <span class=\"o\">|</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">typing_extensions</span><span class=\"o\">.</span><span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, {"fullname": "Group.Group.remove_system", "modulename": "Group", "qualname": "Group.remove_system", "kind": "function", "doc": "<p>Remove a given system from this group.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>sys_to_del: System | int | str</strong>:  If sys_to_del is a System, it's the system to delete, if it's an int it's\nthe system ID number, otherwise if it's a str, then it's the name of the system.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>IndexError</strong>:  If the system is not found in the system list.</li>\n<li><strong>GroupError</strong>:  If the system is not found in the group system list.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sys_to_del</span><span class=\"p\">:</span> <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"n\">System</span> <span class=\"o\">|</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">typing_extensions</span><span class=\"o\">.</span><span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, {"fullname": "Group.Group.reload", "modulename": "Group", "qualname": "Group.reload", "kind": "function", "doc": "<p>Reload this group from papertrail.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Group.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">typing_extensions</span><span class=\"o\">.</span><span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, {"fullname": "Group.Group.update", "modulename": "Group", "qualname": "Group.update", "kind": "function", "doc": "<p>Update a group.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name: Optional[str]</strong>:  The new name.</li>\n<li><strong>system_wildcard: Optional[str]</strong>:  The new system wildcard.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Group: The updated group.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">system_wildcard</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">typing_extensions</span><span class=\"o\">.</span><span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, {"fullname": "Group.Group.id", "modulename": "Group", "qualname": "Group.id", "kind": "variable", "doc": "<p>Papertrail's system ID.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Int</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "Group.Group.name", "modulename": "Group", "qualname": "Group.name", "kind": "variable", "doc": "<p>Papertrail name.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Str</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "Group.Group.system_wildcard", "modulename": "Group", "qualname": "Group.system_wildcard", "kind": "variable", "doc": "<p>System inclusion wildcard.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Optional[str]</p>\n</blockquote>\n", "annotation": ": Optional[str]"}, {"fullname": "Group.Group.self_link", "modulename": "Group", "qualname": "Group.self_link", "kind": "variable", "doc": "<p>Link to self url.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>str</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "Group.Group.html_link", "modulename": "Group", "qualname": "Group.html_link", "kind": "variable", "doc": "<p>Link to HTML info.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Str</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "Group.Group.search_link", "modulename": "Group", "qualname": "Group.search_link", "kind": "variable", "doc": "<p>Link to search api</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Str.</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "Group.Group.last_fetched", "modulename": "Group", "qualname": "Group.last_fetched", "kind": "variable", "doc": "<p>The last time this object was refreshed from the server.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Datetime object.</p>\n</blockquote>\n", "annotation": ": datetime.datetime"}, {"fullname": "Group.Group.systems", "modulename": "Group", "qualname": "Group.systems", "kind": "variable", "doc": "<p>Return a tuple of the systems in this group.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Tuple[System]</p>\n</blockquote>\n", "annotation": ": tuple[System.System]"}, {"fullname": "Groups", "modulename": "Groups", "kind": "module", "doc": "<p>File: Groups.py</p>\n"}, {"fullname": "Groups.Groups", "modulename": "Groups", "qualname": "Groups", "kind": "class", "doc": "<p>Class to represent all the groups.</p>\n"}, {"fullname": "Groups.Groups.__init__", "modulename": "Groups", "qualname": "Groups.__init__", "kind": "function", "doc": "<p>Initialize all the groups, loading from papertrail if requested.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>api_key: Str</strong>:  The api key.</li>\n<li><strong>from_dict: Optional[dict]: The dict created by __to_dict__(); Note</strong>:  that if from_dict is not None, then\nthe do_load option is ignored. Default = None</li>\n<li><strong>do_load: Bool</strong>:  Load from Papertrail, True = Load, False = Don't load. Default = True.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">from_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">do_load</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "Groups.Groups.load", "modulename": "Groups", "qualname": "Groups.load", "kind": "function", "doc": "<p>Load from papertrail.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Groups: The loaded groups.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">typing_extensions</span><span class=\"o\">.</span><span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, {"fullname": "Groups.Groups.reload", "modulename": "Groups", "qualname": "Groups.reload", "kind": "function", "doc": "<p>Reload the data.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Groups: The updated groups.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">typing_extensions</span><span class=\"o\">.</span><span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, {"fullname": "Groups.Groups.create", "modulename": "Groups", "qualname": "Groups.create", "kind": "function", "doc": "<p>Create a new group.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name: Str</strong>:  The Name of the new group.</li>\n<li><strong>system_wildcard: Optional[str]</strong>:  The system wildcard.</li>\n<li><strong>systems: Optional[list[System | str | int]]</strong>:  A list of systems to add to the group, Either a System\nobject, an int for the system ID, or a str for the system name.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Group: The newly created Group object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">system_wildcard</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">systems</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">System</span><span class=\"o\">.</span><span class=\"n\">System</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">int</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Group</span><span class=\"o\">.</span><span class=\"n\">Group</span>:</span></span>", "funcdef": "def"}, {"fullname": "Groups.Groups.delete", "modulename": "Groups", "qualname": "Groups.delete", "kind": "function", "doc": "<p>Delete a group.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>group_idx: Group | int | str</strong>:  The group to delete, either a Group object, an int, at which groups\nwill be indexed by id, and a str at which point the group will be deleted by name</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">group_idx</span><span class=\"p\">:</span> <span class=\"n\">Group</span><span class=\"o\">.</span><span class=\"n\">Group</span> <span class=\"o\">|</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "Groups.Groups.get_by_id", "modulename": "Groups", "qualname": "Groups.get_by_id", "kind": "function", "doc": "<p>Get a Group by ID.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>search_id: Int</strong>:  The id number of the group.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Group | None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">search_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Group</span><span class=\"o\">.</span><span class=\"n\">Group</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "Groups.Groups.get_by_name", "modulename": "Groups", "qualname": "Groups.get_by_name", "kind": "function", "doc": "<p>Get a list of Groups by name, returns None if not found.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>search_name: Str</strong>:  The name of the group.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Group | None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">search_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">Group</span><span class=\"o\">.</span><span class=\"n\">Group</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "Groups.Groups.get_by_system", "modulename": "Groups", "qualname": "Groups.get_by_system", "kind": "function", "doc": "<p>Get a list of groups that include this system.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>search_sys: System</strong>:  The system to search for.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Group | None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">search_sys</span><span class=\"p\">:</span> <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"n\">System</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">Group</span><span class=\"o\">.</span><span class=\"n\">Group</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "Groups.Groups.find_in_name", "modulename": "Groups", "qualname": "Groups.find_in_name", "kind": "function", "doc": "<p>Search names for a substring, and return a list of groups that match.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>search_str: Str</strong>:  The substring to search for.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list[Group] | None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">search_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">Group</span><span class=\"o\">.</span><span class=\"n\">Group</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "Groups.Groups.is_loaded", "modulename": "Groups", "qualname": "Groups.is_loaded", "kind": "variable", "doc": "<p>Return if this has been loaded somehow.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Bool.</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "Groups.Groups.last_fetched", "modulename": "Groups", "qualname": "Groups.last_fetched", "kind": "variable", "doc": "<p>The date / time this was last retrieved from papertrail, time in UTC.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Datetime object.</p>\n</blockquote>\n", "annotation": ": datetime.datetime"}, {"fullname": "Groups.Groups.groups", "modulename": "Groups", "qualname": "Groups.groups", "kind": "variable", "doc": "<p>Return a tuple of groups.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Tuple[Group]</p>\n</blockquote>\n", "annotation": ": tuple[Group.Group]"}, {"fullname": "Papertrail", "modulename": "Papertrail", "kind": "module", "doc": "<p>File: Papertrail.py</p>\n"}, {"fullname": "Papertrail.Papertrail", "modulename": "Papertrail", "qualname": "Papertrail", "kind": "class", "doc": "<p>Class for all papertrail objects.</p>\n"}, {"fullname": "Papertrail.Papertrail.__init__", "modulename": "Papertrail", "qualname": "Papertrail.__init__", "kind": "function", "doc": "<p>Initialize papertrail interface.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>api_key: Str</strong>:  The api key.</li>\n<li><strong>from_dict: Dict: Load from a dict created by __to_dict__(), NOTE</strong>:  if from_dict is used, do_load is\nignored.</li>\n<li><strong>do_load: Bool</strong>:  Load from papertrail. Default = True.</li>\n<li><strong>use_warnings: Bool</strong>:  Use warnings. Default = True.\n:returns: None</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">from_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">do_load</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">use_warnings</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "Papertrail.Papertrail.search", "modulename": "Papertrail", "qualname": "Papertrail.search", "kind": "function", "doc": "<p>Search the logs:</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>query: Optional[str]</strong>:  The search query.</li>\n<li><strong>system: Optional[System | str | int]</strong>:  Limit search to this System object, system id if an int, system\nname if a str.</li>\n<li><strong>group: Optional[Group | str | int]</strong>:  Limit search to this Group object, group id if an int, or group\nname if a str.</li>\n<li><strong>min_id: Optional[int | Event]</strong>:  Min Event ID, or event, can't be combined with min_time.</li>\n<li><strong>max_id: Optional[int | Event]</strong>:  Max Event ID, or event, can't be combined with max_time.</li>\n<li><strong>min_time: Optional[datetime]</strong>:  The Min datetime object can't be combined with min_id.</li>\n<li><strong>max_time: Optional[datetime]</strong>:  The Max datetime can't be combined with max_id.</li>\n<li><strong>limit: Optional[int]</strong>:  Number of events to return.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError</strong>:  If an invalid type is passed.</li>\n<li><strong>ParameterError</strong>:  If an invalid parameter combination is passed.</li>\n<li><strong>IndexError</strong>:  If an invalid System id, name, or System object, an invalid Group id, name, Group object\nis passed.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Results object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">system</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">System</span><span class=\"o\">.</span><span class=\"n\">System</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">group</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Group</span><span class=\"o\">.</span><span class=\"n\">Group</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">min_id</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Event</span><span class=\"o\">.</span><span class=\"n\">Event</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">max_id</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Event</span><span class=\"o\">.</span><span class=\"n\">Event</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">min_time</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">max_time</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">limit</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Results</span><span class=\"o\">.</span><span class=\"n\">Results</span>:</span></span>", "funcdef": "def"}, {"fullname": "Papertrail.Papertrail.archives", "modulename": "Papertrail", "qualname": "Papertrail.archives", "kind": "variable", "doc": "<p>Archives instance.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Archives</p>\n</blockquote>\n", "annotation": ": Archives.Archives"}, {"fullname": "Papertrail.Papertrail.destinations", "modulename": "Papertrail", "qualname": "Papertrail.destinations", "kind": "variable", "doc": "<p>Destinations instance.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Destinations</p>\n</blockquote>\n", "annotation": ": Destinations.Destinations"}, {"fullname": "Papertrail.Papertrail.groups", "modulename": "Papertrail", "qualname": "Papertrail.groups", "kind": "variable", "doc": "<p>Groups instance.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Groups</p>\n</blockquote>\n", "annotation": ": Groups.Groups"}, {"fullname": "Papertrail.Papertrail.systems", "modulename": "Papertrail", "qualname": "Papertrail.systems", "kind": "variable", "doc": "<p>Systems instance.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Systems</p>\n</blockquote>\n", "annotation": ": Systems.Systems"}, {"fullname": "Papertrail.Papertrail.usage", "modulename": "Papertrail", "qualname": "Papertrail.usage", "kind": "variable", "doc": "<p>Usage instance.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Usage</p>\n</blockquote>\n", "annotation": ": Usage.Usage"}, {"fullname": "Papertrail.Papertrail.rate_limits", "modulename": "Papertrail", "qualname": "Papertrail.rate_limits", "kind": "variable", "doc": "<p>Rate Limits Instance.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>RateLimits</p>\n</blockquote>\n", "annotation": ": RateLimits.RateLimits"}, {"fullname": "RateLimits", "modulename": "RateLimits", "kind": "module", "doc": "<p>File: RateLimits.py</p>\n"}, {"fullname": "RateLimits.limit", "modulename": "RateLimits", "qualname": "limit", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "25"}, {"fullname": "RateLimits.remaining", "modulename": "RateLimits", "qualname": "remaining", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "25"}, {"fullname": "RateLimits.reset", "modulename": "RateLimits", "qualname": "reset", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "5"}, {"fullname": "RateLimits.RateLimits", "modulename": "RateLimits", "qualname": "RateLimits", "kind": "class", "doc": "<p>Class to hold rate limit properties.</p>\n"}, {"fullname": "RateLimits.RateLimits.__init__", "modulename": "RateLimits", "qualname": "RateLimits.__init__", "kind": "function", "doc": "<p>Initialize rate limits.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "RateLimits.RateLimits.limit", "modulename": "RateLimits", "qualname": "RateLimits.limit", "kind": "variable", "doc": "<p>The total number of requests allowed during the rate limit window, currently 25.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Optional[int]</p>\n</blockquote>\n", "annotation": ": Optional[int]"}, {"fullname": "RateLimits.RateLimits.remaining", "modulename": "RateLimits", "qualname": "RateLimits.remaining", "kind": "variable", "doc": "<p>The number of requests not yet used within the current rate limit window.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Optional[int]</p>\n</blockquote>\n", "annotation": ": Optional[int]"}, {"fullname": "RateLimits.RateLimits.reset", "modulename": "RateLimits", "qualname": "RateLimits.reset", "kind": "variable", "doc": "<p>The duration (in seconds) remaining until the rate limit window resets, currently 5 seconds.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Optional[int]</p>\n</blockquote>\n", "annotation": ": Optional[int]"}, {"fullname": "Results", "modulename": "Results", "kind": "module", "doc": "<p>File: Results.py</p>\n"}, {"fullname": "Results.Results", "modulename": "Results", "qualname": "Results", "kind": "class", "doc": "<p>Class to store search results.</p>\n"}, {"fullname": "Results.Results.__init__", "modulename": "Results", "qualname": "Results.__init__", "kind": "function", "doc": "<p>Initialize the search results:</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>raw_results: Optional[dict]</strong>:  The results dict provided by Papertrail.</li>\n<li><strong>from_dict: Optional[dict]</strong>:  A dict provided by __to_dict__().</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ParameterError</strong>:  If an invalid parameter combination is provided.</li>\n<li><strong>TypeError</strong>:  If an invalid type is passed.</li>\n<li><strong>InvalidServerResponse</strong>:  If a key isn't found in the papertrail dict.</li>\n<li><strong>QueryError</strong>:  If an invalid dict is passed to from_dict.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">raw_results</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">from_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "Results.Results.min_id", "modulename": "Results", "qualname": "Results.min_id", "kind": "variable", "doc": "<p>Minimum ID.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Int</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "Results.Results.max_id", "modulename": "Results", "qualname": "Results.max_id", "kind": "variable", "doc": "<p>Maximum ID.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Int</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "Results.Results.reached_beginning", "modulename": "Results", "qualname": "Results.reached_beginning", "kind": "variable", "doc": "<p>Search reached beginning.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Optional[bool]</p>\n</blockquote>\n", "annotation": ": Optional[bool]"}, {"fullname": "Results.Results.min_time_it", "modulename": "Results", "qualname": "Results.min_time_it", "kind": "variable", "doc": "<p>Min date time.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Optional[datetime]</p>\n</blockquote>\n", "annotation": ": Optional[datetime.datetime]"}, {"fullname": "Results.Results.max_time_at", "modulename": "Results", "qualname": "Results.max_time_at", "kind": "variable", "doc": "<p>Max date time.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Optional[datetime]</p>\n</blockquote>\n", "annotation": ": Optional[datetime.datetime]"}, {"fullname": "Results.Results.reached_time_limit", "modulename": "Results", "qualname": "Results.reached_time_limit", "kind": "variable", "doc": "<p>Search reached time limit.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Optional[bool]</p>\n</blockquote>\n", "annotation": ": Optional[bool]"}, {"fullname": "Results.Results.reached_record_limit", "modulename": "Results", "qualname": "Results.reached_record_limit", "kind": "variable", "doc": "<p>Search reached the record limit.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Optional[bool]</p>\n</blockquote>\n", "annotation": ": Optional[bool]"}, {"fullname": "Results.Results.reached_end", "modulename": "Results", "qualname": "Results.reached_end", "kind": "variable", "doc": "<p>The search reached the end.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Optional[bool]</p>\n</blockquote>\n", "annotation": ": Optional[bool]"}, {"fullname": "Results.Results.sawmill", "modulename": "Results", "qualname": "Results.sawmill", "kind": "variable", "doc": "<p>Sawmill??</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Optional[bool]</p>\n</blockquote>\n", "annotation": ": Optional[bool]"}, {"fullname": "Results.Results.events", "modulename": "Results", "qualname": "Results.events", "kind": "variable", "doc": "<p>The list of events.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Tuple[Event]</p>\n</blockquote>\n", "annotation": ": tuple[Event.Event]"}, {"fullname": "SavedSearches", "modulename": "SavedSearches", "kind": "module", "doc": "<p>File: SavedSearches.py</p>\n"}, {"fullname": "SavedSearches.SavedSearches", "modulename": "SavedSearches", "qualname": "SavedSearches", "kind": "class", "doc": "<p>Class to store a list of saved searches.</p>\n"}, {"fullname": "SavedSearches.SavedSearches.__init__", "modulename": "SavedSearches", "qualname": "SavedSearches.__init__", "kind": "function", "doc": "<p>Initialize the searches instance:</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>from_dict: Optional[dict]: The dict provided by __to_dict__(), NOTE</strong>:  if from_dict is defined, then\ndo_load is ignored.</li>\n<li><strong>do_load: Bool</strong>:  Load data from Papertrail on init, default = True.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">from_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">do_load</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "SavedSearches.SavedSearches.load", "modulename": "SavedSearches", "qualname": "SavedSearches.load", "kind": "function", "doc": "<p>Load data from Papertrail.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "SavedSearches.SavedSearches.reload", "modulename": "SavedSearches", "qualname": "SavedSearches.reload", "kind": "function", "doc": "<p>Reload data from Papertrail.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "SavedSearches.SavedSearches.create", "modulename": "SavedSearches", "qualname": "SavedSearches.create", "kind": "function", "doc": "<p>Create a new saved search.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name: Str</strong>:  The name of the search.</li>\n<li><strong>query: Str</strong>:  Query to run.</li>\n<li><strong>group: Optional[Group | str | int]</strong>:  The group to associate with, if not specified, it will attach to all\nsystems, or the first group. Either a group object, a str for the group name, and an int for the group id.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>SavedSearch: The newly created saved search object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">group</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Group</span><span class=\"o\">.</span><span class=\"n\">Group</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">SavedSearch</span><span class=\"o\">.</span><span class=\"n\">SavedSearch</span>:</span></span>", "funcdef": "def"}, {"fullname": "SavedSearches.SavedSearches.get_by_name", "modulename": "SavedSearches", "qualname": "SavedSearches.get_by_name", "kind": "function", "doc": "<p>Return a list of saved searches matching a given name. Returns None if not found.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name: Str</strong>:  The name to search for.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>SavedSearchError</strong>:  If the saved search list isn't loaded.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Optional[list[SavedSearch]]</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">SavedSearch</span><span class=\"o\">.</span><span class=\"n\">SavedSearch</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SavedSearches.SavedSearches.get_by_query", "modulename": "SavedSearches", "qualname": "SavedSearches.get_by_query", "kind": "function", "doc": "<p>Get a list of saved searches by query, returns None if not found.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>query: Str</strong>:  The query to search for.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>SavedSearchError</strong>:  If the saved search list isn't loaded.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Optional[list[SavedSearch]]</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">SavedSearch</span><span class=\"o\">.</span><span class=\"n\">SavedSearch</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SavedSearches.SavedSearches.find_in_name", "modulename": "SavedSearches", "qualname": "SavedSearches.find_in_name", "kind": "function", "doc": "<p>Find in names, run name.find() and if a result, returns it, None if not found.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>search_name: Str</strong>:  The search string to find in names.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Optional[list[SavedSearch]]</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">search_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">SavedSearch</span><span class=\"o\">.</span><span class=\"n\">SavedSearch</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SavedSearches.SavedSearches.find_in_query", "modulename": "SavedSearches", "qualname": "SavedSearches.find_in_query", "kind": "function", "doc": "<p>Find in query string, runs query.find() and if a result returns it, None if not found.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>search_query: Str</strong>:  The search string to find in the query.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Optional[list[SavedSearch]]</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">search_query</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">SavedSearch</span><span class=\"o\">.</span><span class=\"n\">SavedSearch</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SavedSearches.SavedSearches.searches", "modulename": "SavedSearches", "qualname": "SavedSearches.searches", "kind": "variable", "doc": "<p>Return a tuple of searches.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Tuple[SavedSearch]</p>\n</blockquote>\n", "annotation": ": tuple[SavedSearch.SavedSearch]"}, {"fullname": "SavedSearches.SavedSearches.last_fetched", "modulename": "SavedSearches", "qualname": "SavedSearches.last_fetched", "kind": "variable", "doc": "<p>Last time this was loaded from the server.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Datetime object.</p>\n</blockquote>\n", "annotation": ": datetime.datetime"}, {"fullname": "SavedSearches.SavedSearches.is_loaded", "modulename": "SavedSearches", "qualname": "SavedSearches.is_loaded", "kind": "variable", "doc": "<p>Has this been loaded in some way.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Bool.</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "SavedSearch", "modulename": "SavedSearch", "kind": "module", "doc": "<p>File: SavedSearch.py</p>\n"}, {"fullname": "SavedSearch.SavedSearch", "modulename": "SavedSearch", "qualname": "SavedSearch", "kind": "class", "doc": "<p>Class to store a single saved search.</p>\n"}, {"fullname": "SavedSearch.SavedSearch.__init__", "modulename": "SavedSearch", "qualname": "SavedSearch.__init__", "kind": "function", "doc": "<p>Initialize a saved search.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>api_key: Str</strong>:  The api key.</li>\n<li><strong>from_dict: Optional[dict]</strong>:  A dict provided by __to_dict__().</li>\n<li><strong>raw_search: Optional[dict]: A dict provided by Papertrail, NOTE</strong>:  if using raw_search, last_fetched must\nbe defined.</li>\n<li><strong>last_fetched: Optional[datetime]</strong>:  A datetime object for when this was last fetched.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">from_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">raw_search</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">last_fetched</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "SavedSearch.SavedSearch.reload", "modulename": "SavedSearch", "qualname": "SavedSearch.reload", "kind": "function", "doc": "<p>Reload the data for this search.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "SavedSearch.SavedSearch.update", "modulename": "SavedSearch", "qualname": "SavedSearch.update", "kind": "function", "doc": "<p>Update this saved search. Returns the updated saved search instance.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name: Optional[str]</strong>:  The name to set.</li>\n<li><strong>query: Optional[str]</strong>:  The query to set.</li>\n<li><strong>group: Optional[Group | int]</strong>:  The group to associate with. It can be a Group object, or an int for the\nID of the group.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>SavedSearch</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">group</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Group</span><span class=\"o\">.</span><span class=\"n\">Group</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">typing_extensions</span><span class=\"o\">.</span><span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, {"fullname": "SavedSearch.SavedSearch.name", "modulename": "SavedSearch", "qualname": "SavedSearch.name", "kind": "variable", "doc": "<p>Name of the saved search</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Str</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "SavedSearch.SavedSearch.id", "modulename": "SavedSearch", "qualname": "SavedSearch.id", "kind": "variable", "doc": "<p>The papertrail ID of this saved search.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Int</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "SavedSearch.SavedSearch.query", "modulename": "SavedSearch", "qualname": "SavedSearch.query", "kind": "variable", "doc": "<p>The query.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Str</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "SavedSearch.SavedSearch.group", "modulename": "SavedSearch", "qualname": "SavedSearch.group", "kind": "variable", "doc": "<p>The group this is associated with.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Group</p>\n</blockquote>\n", "annotation": ": Group.Group"}, {"fullname": "SavedSearch.SavedSearch.self_link", "modulename": "SavedSearch", "qualname": "SavedSearch.self_link", "kind": "variable", "doc": "<p>Link to this JSON object.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Str</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "SavedSearch.SavedSearch.search_link", "modulename": "SavedSearch", "qualname": "SavedSearch.search_link", "kind": "variable", "doc": "<p>The search link.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Str</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "SavedSearch.SavedSearch.html_link", "modulename": "SavedSearch", "qualname": "SavedSearch.html_link", "kind": "variable", "doc": "<p>The html info link</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Str</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "SavedSearch.SavedSearch.last_fetched", "modulename": "SavedSearch", "qualname": "SavedSearch.last_fetched", "kind": "variable", "doc": "<p>The last time this was fetched from the server in UTC.</p>\n\n<h6 id=\"returns\">Returns</h6>\n", "annotation": ": datetime.datetime"}, {"fullname": "System", "modulename": "System", "kind": "module", "doc": "<p>File: System.py</p>\n"}, {"fullname": "System.System", "modulename": "System", "qualname": "System", "kind": "class", "doc": "<p>Class to store a single system.</p>\n"}, {"fullname": "System.System.__init__", "modulename": "System", "qualname": "System.__init__", "kind": "function", "doc": "<p>Initialize a System object:</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>api_key: Str</strong>:  The api key.</li>\n<li><strong>last_fetched: Optional[datetime]: The datetime object for when this was last fetched, note</strong>:  must be set\nif using the raw_system parameter, and it will be ignored if using from_dict parameter.</li>\n<li><strong>raw_system: Dict</strong>:  The dict received from papertrail.</li>\n<li><strong>from_dict: Dict</strong>:  The dict created by __to_dict__().</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li>SystemsError: If raw_system and from_dict are either both None or both defined, or if an invalid\nraw_system dict, or from_dict dict are lacking a key.</li>\n<li>TypeError: If an invalid type is passed as a parameter.\n:returns: None</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">last_fetched</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">raw_system</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">from_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "System.System.reload", "modulename": "System", "qualname": "System.reload", "kind": "function", "doc": "<p>Reload data from papertrail.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>System: The updated system instance.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">typing_extensions</span><span class=\"o\">.</span><span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, {"fullname": "System.System.update", "modulename": "System", "qualname": "System.update", "kind": "function", "doc": "<p>Update this system.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name: Optional[Str]</strong>:  The friendly name of the system.</li>\n<li><strong>ip_address: Optional[Str]</strong>:  The ip address of the system.</li>\n<li><strong>host_name: Optional[Str]</strong>:  The host name of the system.</li>\n<li><strong>description: Optional[Str]</strong>:  The freeform description of the system.</li>\n<li><strong>auto_delete: Optional[Bool]</strong>:  Whether to automatically delete the system.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError</strong>:  If an invalid type is passed.</li>\n<li><strong>ValueError</strong>:  If an invalid valid is passed.</li>\n<li><strong>InvalidServerResponse</strong>:  If server sends bad JSON.</li>\n<li><strong>RequestReadTimeout</strong>:  If the server fails to respond in time.</li>\n<li><strong>SystemsError</strong>: \n-> When nothing passed.\n-> When requests.RequestException occurs.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>System: The updated system instance.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ip_address</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">host_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">description</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">auto_delete</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">typing_extensions</span><span class=\"o\">.</span><span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, {"fullname": "System.System.id", "modulename": "System", "qualname": "System.id", "kind": "variable", "doc": "<p>Papertrail's system ID.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Int</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "System.System.name", "modulename": "System", "qualname": "System.name", "kind": "variable", "doc": "<p>System name.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Str</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "System.System.last_event", "modulename": "System", "qualname": "System.last_event", "kind": "variable", "doc": "<p>Last event date / time.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Optional timezone-aware datetime object.</p>\n</blockquote>\n", "annotation": ": Optional[datetime.datetime]"}, {"fullname": "System.System.auto_delete", "modulename": "System", "qualname": "System.auto_delete", "kind": "variable", "doc": "<p>Auto delete.\nNOTE: I'm not sure what this means, because it's not in the web docs.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Bool.</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "System.System.json_info_link", "modulename": "System", "qualname": "System.json_info_link", "kind": "variable", "doc": "<p>Link to json information.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Str</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "System.System.html_info_link", "modulename": "System", "qualname": "System.html_info_link", "kind": "variable", "doc": "<p>Link to HTML information.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Str</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "System.System.search_link", "modulename": "System", "qualname": "System.search_link", "kind": "variable", "doc": "<p>Link to search the logs of this system.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Str</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "System.System.ip_address", "modulename": "System", "qualname": "System.ip_address", "kind": "variable", "doc": "<p>The IP address of the system.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Optional[str]</p>\n</blockquote>\n", "annotation": ": Optional[str]"}, {"fullname": "System.System.host_name", "modulename": "System", "qualname": "System.host_name", "kind": "variable", "doc": "<p>The host name of this system.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Optional[str]</p>\n</blockquote>\n", "annotation": ": Optional[str]"}, {"fullname": "System.System.syslog_host_name", "modulename": "System", "qualname": "System.syslog_host_name", "kind": "variable", "doc": "<p>Syslog target host name.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Str</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "System.System.syslog_port", "modulename": "System", "qualname": "System.syslog_port", "kind": "variable", "doc": "<p>Syslog target port</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Int</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "System.System.last_fetched", "modulename": "System", "qualname": "System.last_fetched", "kind": "variable", "doc": "<p>Date/Time this system was last fetched from papertrail.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Timezone-aware datetime object.</p>\n</blockquote>\n", "annotation": ": datetime.datetime"}, {"fullname": "Systems", "modulename": "Systems", "kind": "module", "doc": "<p>File: Systems.py</p>\n"}, {"fullname": "Systems.Systems", "modulename": "Systems", "qualname": "Systems", "kind": "class", "doc": "<p>Class to store the systems as a list.</p>\n"}, {"fullname": "Systems.Systems.__init__", "modulename": "Systems", "qualname": "Systems.__init__", "kind": "function", "doc": "<p>Initialize the systems list.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>api_key: Str</strong>:  The api key.</li>\n<li><strong>from_dict: Dict</strong>:  The dict to load from created by __to_dict__(), Note if not None do_load is ignored.</li>\n<li><strong>do_load: Bool</strong>:  True, make request from papertrail, False do not.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li>SystemsError: On request error, or if invalid JSON is returned.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">from_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">do_load</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "Systems.Systems.load", "modulename": "Systems", "qualname": "Systems.load", "kind": "function", "doc": "<p>Load the systems list from papertrail.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "Systems.Systems.reload", "modulename": "Systems", "qualname": "Systems.reload", "kind": "function", "doc": "<p>Reload the systems list.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "Systems.Systems.register", "modulename": "Systems", "qualname": "Systems.register", "kind": "function", "doc": "<p>Register a new system with papertrail.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name: Str</strong>:  Papertrail name.</li>\n<li><strong>host_name: Optional[str]</strong>:  Filter events to only those from this syslog host name.</li>\n<li><strong>ip_address: Optional[str]</strong>:  The Ip address of the system, it should be a static public ip.</li>\n<li><strong>destination_port: Optional[int]</strong>:  Syslog target port. If set to port 519, ip_address must be specified.</li>\n<li><strong>destination_id: Optional[int]</strong>:  Syslog destination papertrail ID.</li>\n<li><strong>destination: Optional[Destination]</strong>:  A Destination object produced by this library.</li>\n<li><strong>description: Optional[str]</strong>:  The description of this system.</li>\n<li><strong>auto_delete: Optional[bool]</strong>:  Auto delete system if idle.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li>SystemsError: When an error occurs.</li>\n<li>TypeError / ValueError: if invalid types or invalid values are passed.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Tuple[bool, str]: The first element is a bool indicating success (True), or failure (False), The second\n      element will be the message \"OK\" if the first element is true, and an error message indicating what went\n      wrong.\n  :NOTE: One of the parameters: 'destination_port', 'destination_id', 'destination', must be defined. If more\n      than one is defined, then they are preferred in this order: 'destination', 'destination_id',\n      'destination_port'.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">host_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ip_address</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">destination_port</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">destination_id</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">destination</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Destination</span><span class=\"o\">.</span><span class=\"n\">Destination</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">description</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">auto_delete</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"n\">System</span>:</span></span>", "funcdef": "def"}, {"fullname": "Systems.Systems.remove", "modulename": "Systems", "qualname": "Systems.remove", "kind": "function", "doc": "<p>Remove a system from papertrail.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>index: System | int | str</strong>:  The system to remove, if System, if int, it's index to remove, if str it's\nthe system name that is used to look up which system to remove.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"n\">System</span> <span class=\"o\">|</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "Systems.Systems.get_by_id", "modulename": "Systems", "qualname": "Systems.get_by_id", "kind": "function", "doc": "<p>Get a system by ID.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>search_id: Int</strong>:  The system ID to search for.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>System | None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">search_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"n\">System</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "Systems.Systems.get_by_name", "modulename": "Systems", "qualname": "Systems.get_by_name", "kind": "function", "doc": "<p>Get a system by name.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>search_name: Str</strong>:  The name to search for</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Str</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">search_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"n\">System</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "Systems.Systems.find_in_name", "modulename": "Systems", "qualname": "Systems.find_in_name", "kind": "function", "doc": "<p>Search names for a substring and return a list of matching systems.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>search_str: Str</strong>:  The substring to search for.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list[System] | None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">search_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">System</span><span class=\"o\">.</span><span class=\"n\">System</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "Systems.Systems.last_fetched", "modulename": "Systems", "qualname": "Systems.last_fetched", "kind": "variable", "doc": "<p>When the systems were last fetched from papertrail.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Optional[datetime]</p>\n</blockquote>\n", "annotation": ": Optional[datetime.datetime]"}, {"fullname": "Systems.Systems.is_loaded", "modulename": "Systems", "qualname": "Systems.is_loaded", "kind": "variable", "doc": "<p>Has the systems list been loaded?</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Bool</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "Systems.Systems.systems", "modulename": "Systems", "qualname": "Systems.systems", "kind": "variable", "doc": "<p>Return a tuple of Systems.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Tuple[System]</p>\n</blockquote>\n", "annotation": ": tuple[System.System]"}, {"fullname": "Usage", "modulename": "Usage", "kind": "module", "doc": "<p>File: Usage.py</p>\n"}, {"fullname": "Usage.Usage", "modulename": "Usage", "qualname": "Usage", "kind": "class", "doc": "<p>Class to store usage data.</p>\n"}, {"fullname": "Usage.Usage.__init__", "modulename": "Usage", "qualname": "Usage.__init__", "kind": "function", "doc": "<p>Initialize a usage object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>api_key: Str</strong>:  The api key.</li>\n<li><strong>from_dict: Optional[dict]: The dict provided by __to_dict__(), NOTE</strong>:  if from dict is defined, do_load\nis ignored.</li>\n<li><strong>do_load: Bool</strong>:  Load from papertrail.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">from_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">do_load</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "Usage.Usage.load", "modulename": "Usage", "qualname": "Usage.load", "kind": "function", "doc": "<p>Load from papertrail.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "Usage.Usage.reload", "modulename": "Usage", "qualname": "Usage.reload", "kind": "function", "doc": "<p>Reload from Papertrail.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "Usage.Usage.data_used", "modulename": "Usage", "qualname": "Usage.data_used", "kind": "variable", "doc": "<p>Data used in bytes.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Int</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "Usage.Usage.data_used_percent", "modulename": "Usage", "qualname": "Usage.data_used_percent", "kind": "variable", "doc": "<p>Data used percentage.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Float</p>\n</blockquote>\n", "annotation": ": float"}, {"fullname": "Usage.Usage.plan_limit", "modulename": "Usage", "qualname": "Usage.plan_limit", "kind": "variable", "doc": "<p>Data plan limit in bytes.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Int</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "Usage.Usage.hard_limit", "modulename": "Usage", "qualname": "Usage.hard_limit", "kind": "variable", "doc": "<p>Hard limit in bytes.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Int</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "Usage.Usage.is_loaded", "modulename": "Usage", "qualname": "Usage.is_loaded", "kind": "variable", "doc": "<p>If the usage has been loaded.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Bool</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "Usage.Usage.last_fetched", "modulename": "Usage", "qualname": "Usage.last_fetched", "kind": "variable", "doc": "<p>Last datetime this was last loaded from Papertrail in UTC.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Optional[datetime]: None if not loaded.</p>\n</blockquote>\n", "annotation": ": Optional[datetime.datetime]"}, {"fullname": "User", "modulename": "User", "kind": "module", "doc": "<p>File: User.py</p>\n"}, {"fullname": "User.User", "modulename": "User", "qualname": "User", "kind": "class", "doc": "<p>Class to store a single user.</p>\n"}, {"fullname": "User.User.__init__", "modulename": "User", "qualname": "User.__init__", "kind": "function", "doc": "<p>Initialize a user.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>api_key: Str</strong>:  Api key.</li>\n<li><strong>from_dict: Dict</strong>:  A dict provided by __to_dict__().</li>\n<li><strong>raw_user: Dict</strong>:  Raw dict provided by Papertrail.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">from_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">raw_user</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "User.User.update", "modulename": "User", "qualname": "User.update", "kind": "function", "doc": "<p>Update this user, NOTE: one of the parameters must be defined.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>email: Optional[str]</strong>:  The users' email address.</li>\n<li><strong>read_only: Optional[bool]</strong>:  User is read only.</li>\n<li><strong>manage_members: Optional[bool]</strong>:  User can manage members.</li>\n<li><strong>manage_billing: Optional[bool]</strong>:  User can manage billing.</li>\n<li><strong>purge_logs: Optional[bool]</strong>:  User can delete logs.</li>\n<li><strong>all_groups: Optional[bool]</strong>:  User can access all groups.</li>\n<li><strong>groups: Optional[list[Group | int | str]]</strong>:  List of Group objects, group id's[int], or group names[str]</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>User: The updated instance.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">email</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">read_only</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">manage_members</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">manage_billing</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">purge_logs</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">all_groups</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">groups</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">Group</span><span class=\"o\">.</span><span class=\"n\">Group</span> <span class=\"o\">|</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">typing_extensions</span><span class=\"o\">.</span><span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, {"fullname": "User.User.id", "modulename": "User", "qualname": "User.id", "kind": "variable", "doc": "<p>Return the user id.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Int</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "User.User.email", "modulename": "User", "qualname": "User.email", "kind": "variable", "doc": "<p>Users' email address.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Str</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "Users", "modulename": "Users", "kind": "module", "doc": "<p>File: Users.py</p>\n"}, {"fullname": "Users.Users", "modulename": "Users", "qualname": "Users", "kind": "class", "doc": "<p>Class to store users list.</p>\n"}, {"fullname": "Users.Users.__init__", "modulename": "Users", "qualname": "Users.__init__", "kind": "function", "doc": "<p>Initialize users' list.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>api_key: Str</strong>:  The api key</li>\n<li><strong>from_dict: Dict: The dict provided by __to_dict__(), NOTE</strong>:  If from_dict is provided, do_load is ignored.</li>\n<li><strong>do_load: Bool</strong>:  Load from Papertrail or not. Default = True.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">from_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">do_load</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "Users.Users.load", "modulename": "Users", "qualname": "Users.load", "kind": "function", "doc": "<p>Load data from papertrail.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "Users.Users.reload", "modulename": "Users", "qualname": "Users.reload", "kind": "function", "doc": "<p>Reload the data.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "Users.Users.invite", "modulename": "Users", "qualname": "Users.invite", "kind": "function", "doc": "<p>Invite a user to your papertrail account.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>email: Str</strong>:  Email address to send invite to.</li>\n<li><strong>read_only: Bool</strong>:  Is the user read only?</li>\n<li><strong>manage_members: Optional[bool]</strong>:  Can the user manage members?</li>\n<li><strong>manage_billing: Optional[bool]</strong>:  Can the user manage billing?</li>\n<li><strong>purge_logs: Optional[bool]</strong>:  Can the user delete logs?</li>\n<li><strong>all_groups: Optional[bool]</strong>:  Can the user see all the groups?</li>\n<li><strong>groups: Optional[list[Group | int | str]]</strong>:  List of groups the user should see.  Elements should be one\nof: Group objects, str [group name], or int[group id].</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError</strong>:  If an invalid type passed.</li>\n<li><strong>UsersError</strong>:  If an invalid parameter situation is encountered.\n:raise IndexError: If an invalid group, group id, or group name is found in the loaded Groups.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">email</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">read_only</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">manage_members</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">manage_billing</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">purge_logs</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">all_groups</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">groups</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">Group</span><span class=\"o\">.</span><span class=\"n\">Group</span> <span class=\"o\">|</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "Users.Users.delete", "modulename": "Users", "qualname": "Users.delete", "kind": "function", "doc": "<p>Delete a given user, returns the updated users object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>user_to_del: User object | str | int</strong>:  The user to delete, either a User object, the email of the\nuser(str), or the user id(int).</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>IndexError</strong>:  If the user is not found.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Users: The updated Self object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">user_to_del</span><span class=\"p\">:</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">User</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">typing_extensions</span><span class=\"o\">.</span><span class=\"n\">Self</span>:</span></span>", "funcdef": "def"}, {"fullname": "Users.Users.get_by_id", "modulename": "Users", "qualname": "Users.get_by_id", "kind": "function", "doc": "<p>Get a user by ID, returns None if not found.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>search_id: Int</strong>:  The ID of the user.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>UsersError</strong>:  If the user list has not been loaded.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Optional[User]</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">search_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">User</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "Users.Users.get_by_email", "modulename": "Users", "qualname": "Users.get_by_email", "kind": "function", "doc": "<p>Get a user by email returns None if not found.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>search_email: Str</strong>:  The email to search for.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>UsersError</strong>:  If the user list has not been loaded.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Optional[User]</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">search_email</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">User</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "Users.Users.is_loaded", "modulename": "Users", "qualname": "Users.is_loaded", "kind": "variable", "doc": "<p>Is the data loaded?</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Bool</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "Users.Users.last_fetched", "modulename": "Users", "qualname": "Users.last_fetched", "kind": "variable", "doc": "<p>Last time this was loaded from papertrail in UTC.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Datetime</p>\n</blockquote>\n", "annotation": ": Optional[datetime.datetime]"}, {"fullname": "Users.Users.users", "modulename": "Users", "qualname": "Users.users", "kind": "variable", "doc": "<p>Return a tuple of the Users.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Tuple(User)</p>\n</blockquote>\n", "annotation": ": tuple[User.User]"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();